<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-23T23:06:39+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">fw0x</title><subtitle>Stay hungry, stay foolish.</subtitle><entry><title type="html">【60天重学左耳】Day08-洞悉PaaS平台的本质</title><link href="http://localhost:4000/code/2019/12/23/cxze60-day08.html" rel="alternate" type="text/html" title="【60天重学左耳】Day08-洞悉PaaS平台的本质" /><published>2019-12-23T22:00:00+08:00</published><updated>2019-12-23T22:00:00+08:00</updated><id>http://localhost:4000/code/2019/12/23/cxze60-day08</id><content type="html" xml:base="http://localhost:4000/code/2019/12/23/cxze60-day08.html">&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/177414?utm_term=zeusL3AA0&amp;amp;utm_source=wechat&amp;amp;utm_medium=chongxuedaka&quot;&gt;左耳朵耗子带你重学《左耳听风》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;打卡Day8：今天学习了《27｜洞悉PaaS平台的本质》，我的收获如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;软件工程能力主要体现在：提高服务的SLA、能力和资源重用或复用、过程的自动化。&lt;/li&gt;
  &lt;li&gt;PaaS平台的本质：服务化（模块重用、服务治理、对外提供能力）、分布式（多租户隔离、高可用、服务编排）、自动化（自动化部署安装运维、自动化伸缩调度）。&lt;/li&gt;
  &lt;li&gt;PaaS平台的总体架构：调度层（自动化和分布式对于高可用高性能的管理）、能力服务层（提供给用户的服务和能力）、流量调度（对高并发的管理）、运营管理（软件资源库、软件接入、认证和开放平台门户）、运维管理（DevOps）。&lt;/li&gt;
  &lt;li&gt;PaaS平台的生产和运维流程：软件构建 =&amp;gt; 软件资产库（Docker Registry） =&amp;gt; DevOps =&amp;gt; 架构控制器 =&amp;gt; 生产环境 =&amp;gt; Docker+Kubernetes集群 =&amp;gt; 软件部署和生产变更。&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">左耳朵耗子带你重学《左耳听风》</summary></entry><entry><title type="html">【60天重学左耳】Day05-分布式系统关键技术：流量与数据调度</title><link href="http://localhost:4000/code/2019/12/20/cxze60-day05.html" rel="alternate" type="text/html" title="【60天重学左耳】Day05-分布式系统关键技术：流量与数据调度" /><published>2019-12-20T21:00:00+08:00</published><updated>2019-12-20T21:00:00+08:00</updated><id>http://localhost:4000/code/2019/12/20/cxze60-day05</id><content type="html" xml:base="http://localhost:4000/code/2019/12/20/cxze60-day05.html">&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/177414?utm_term=zeusL3AA0&amp;amp;utm_source=wechat&amp;amp;utm_medium=chongxuedaka&quot;&gt;左耳朵耗子带你重学《左耳听风》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;打卡Day5：今天学习了《26｜分布式系统关键技术：流量与数据调度》，我的收获如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;服务治理与流量调度的区别：服务治理主内，是数据中心的事，流量调度主内也主外，是数据中心之外的事，也就是边缘计算如CDN。&lt;/li&gt;
  &lt;li&gt;流量调度主要完成：服务流控（服务的发现、路由、降级、熔断、保护）、流量控制（负载均衡、流量分配、异地灾备或多活）、流量管理（协议转换、请求校验、数据缓存、数据计算），这些通常由API Gateway搞定。&lt;/li&gt;
  &lt;li&gt;流量调度的关键技术：高性能（使用高性能语言）、扛流量（集群、通讯协议如Paxos、Raft、Gossip）、业务逻辑（可注入不同语言的简单逻辑如AWS的Lambda）、服务化（提供Admin API管理配置变更）。&lt;/li&gt;
  &lt;li&gt;状态数据调度，一般会把有状态的服务数据存储到中间件上，比如Redis、MySQL、ZooKeeper、或是NFS、Ceph等文件系统。&lt;/li&gt;
  &lt;li&gt;数据副本是分布式系统解决数据丢失异常的手段：让数据高可用就得写多份的，写多份就会引起一致性问题，解决一致性又会引发性能问题。&lt;/li&gt;
  &lt;li&gt;解决数据副本间的一致性问题的技术方案：Master-Slave、Master-Master、两阶段和三阶段提交、Paxos。解决事务问题，在应用层上首选两阶段提交、在数据层上首选Paxos。&lt;/li&gt;
  &lt;li&gt;状态数据调度由分布式存储系统来解决会更有效和优雅，分库分表的数据库中间件都会成为过渡技术。在Iaas层解决的方法：廉价的开源产品如NFS、Ceph、TiDB、CockroachDB、ElasticSearch、InfluxDB、MySQL Cluster、Redis Cluster；云计算厂商方案；更为昂贵的商业网络存储方案。&lt;/li&gt;
  &lt;li&gt;因为数据存储的Scheme不同，导致有各式各样的分布式存储系统：文件对象、关系型数据库、NoSQL、时序数据、搜索数据、队列数据。&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">左耳朵耗子带你重学《左耳听风》</summary></entry><entry><title type="html">【60天重学左耳】Day04-分布式系统关键技术：服务调度</title><link href="http://localhost:4000/code/2019/12/19/cxze60-day04.html" rel="alternate" type="text/html" title="【60天重学左耳】Day04-分布式系统关键技术：服务调度" /><published>2019-12-19T20:00:00+08:00</published><updated>2019-12-19T20:00:00+08:00</updated><id>http://localhost:4000/code/2019/12/19/cxze60-day04</id><content type="html" xml:base="http://localhost:4000/code/2019/12/19/cxze60-day04.html">&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/177414?utm_term=zeusL3AA0&amp;amp;utm_source=wechat&amp;amp;utm_medium=chongxuedaka&quot;&gt;左耳朵耗子带你重学《左耳听风》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;打卡Day4：今天学习了《25｜分布式系统关键技术：服务调度》，我的收获如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;服务调度的关键技术：关键程度、依赖关系、服务发现、版本管理、生命周期管理。&lt;/li&gt;
  &lt;li&gt;服务关键程度，通过细致管理对业务的理解来定义。&lt;/li&gt;
  &lt;li&gt;微服务是服务依赖最优解的上限，下限是千万不要有依赖环。&lt;/li&gt;
  &lt;li&gt;服务依赖关系可以通过Zipkin服务调用跟踪系统来梳理。&lt;/li&gt;
  &lt;li&gt;服务注册中心用来知道：服务数量、服务版本、服务实例数量及状态、服务总体状态。&lt;/li&gt;
  &lt;li&gt;服务状态包括：Provision、Ready、Run、Update、Rollback、Scale、Destroy、Failed。&lt;/li&gt;
  &lt;li&gt;版本管理，即由一堆服务的版本所形成的整个架构的版本控制，用以解决各个服务的版本兼容问题。使用场景如，回滚一个服务的版本，就要把与之有版本依赖的服务也一起回滚。&lt;/li&gt;
  &lt;li&gt;服务调度的关键技术：服务状态的维持和拟合、弹性伸缩和故障迁移、作业和应用调度、作业工作流编排、服务编排。&lt;/li&gt;
  &lt;li&gt;服务运行中状态的变化包括：不预期变化（如故障导致服务挂掉）、预期变化（如发布新版本）。&lt;/li&gt;
  &lt;li&gt;Scale一般步骤：扩展结点 -&amp;gt; 部署服务 -&amp;gt; 启动服务 -&amp;gt; 检查健康 -&amp;gt; 加入服务发现。&lt;/li&gt;
  &lt;li&gt;拟合：控制系统进行若干次操作，努力逼近最终状态、直到完全达到的过程。&lt;/li&gt;
  &lt;li&gt;故障恢复的模式：宠物模式（一定要救活，主要是对于有状态服务）、奶牛模式（重新生成一个实例）。&lt;/li&gt;
  &lt;li&gt;微服务一般使用API网关或消息队列来做编排（Orchestration）。&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">左耳朵耗子带你重学《左耳听风》</summary></entry><entry><title type="html">【60天重学左耳】Day03-分布式系统关键技术：全栈监控</title><link href="http://localhost:4000/code/2019/12/18/cxze60-day03.html" rel="alternate" type="text/html" title="【60天重学左耳】Day03-分布式系统关键技术：全栈监控" /><published>2019-12-18T20:00:00+08:00</published><updated>2019-12-18T20:00:00+08:00</updated><id>http://localhost:4000/code/2019/12/18/cxze60-day03</id><content type="html" xml:base="http://localhost:4000/code/2019/12/18/cxze60-day03.html">&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/177414?utm_term=zeusL3AA0&amp;amp;utm_source=wechat&amp;amp;utm_medium=chongxuedaka&quot;&gt;左耳朵耗子带你重学《左耳听风》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;打卡Day3：今天学习了《24｜分布式系统关键技术：全栈监控》，我的收获如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;监控系统需要完成的功能：全栈监控、关联分析、跨系统调用的串联、实时报警和自动处置、性能分析。&lt;/li&gt;
  &lt;li&gt;全栈监控主要包括三层监控：基础层如CPU、中间层如Nginx、应用层如HTTP响应时间。&lt;/li&gt;
  &lt;li&gt;监控标准化：日志数据结构化、监控数据格式标准化、统一监控平台、统一日志分析。&lt;/li&gt;
  &lt;li&gt;差的监控系统特征：监控数据是隔离开来的串不起来、监控的数据项太多抓不住重点。&lt;/li&gt;
  &lt;li&gt;好的监控系统特征：关注整体SLA，从用户API来监控；关键指标聚合，把服务实例和主机关联起来；快速故障定位，对整个分布式系统做一个用户请求跟踪的trace监控，最好无倾入。&lt;/li&gt;
  &lt;li&gt;监控系统使用场景，体检：容量管理、性能管理；急诊：定位问题、性能分析。&lt;/li&gt;
  &lt;li&gt;监控系统功能：服务调用链跟踪（Zipkin）、服务调用时长分布（Zipkin）、服务的TOP N视图（调用量、请求耗时、热点）、数据库操作关联（JavaAgent字节码）、服务资源跟踪（CPU、MEM、I/O、DISK、NETWORK）。&lt;/li&gt;
  &lt;li&gt;分布式系统最重要的事就是把监控系统做好。收集好数据同时，更重要的是把数据关联好。这样才可能很快地定位故障，进而才能进行自动化调度。&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">左耳朵耗子带你重学《左耳听风》</summary></entry><entry><title type="html">【60天重学左耳】Day02-分布式系统的技术栈</title><link href="http://localhost:4000/code/2019/12/17/cxze60-day02.html" rel="alternate" type="text/html" title="【60天重学左耳】Day02-分布式系统的技术栈" /><published>2019-12-17T23:00:00+08:00</published><updated>2019-12-17T23:00:00+08:00</updated><id>http://localhost:4000/code/2019/12/17/cxze60-day02</id><content type="html" xml:base="http://localhost:4000/code/2019/12/17/cxze60-day02.html">&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/177414?utm_term=zeusL3AA0&amp;amp;utm_source=wechat&amp;amp;utm_medium=chongxuedaka&quot;&gt;左耳朵耗子带你重学《左耳听风》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;打卡Day2：今天学习了《23｜分布式系统的技术栈》，我的收获如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;分布式系统要干的两件事：提高整体吞吐量服务更多并发和流量、提高系统稳定性让可用性更高。&lt;/li&gt;
  &lt;li&gt;提高性能技术包括：缓存、负载均衡、异步调用、数据分区或镜像。&lt;/li&gt;
  &lt;li&gt;提高稳定性技术包括：服务拆分、服务冗余、限流降级、高可用架构、高可用运维。&lt;/li&gt;
  &lt;li&gt;分布式系统的纲，即最最核心的东西：全栈系统监控、服务/资源调度、流量调度、状态/数据调度、开发和运维的自动化。&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">左耳朵耗子带你重学《左耳听风》</summary></entry><entry><title type="html">【60天重学左耳】Day01-分布式架构的发展背景以及难点</title><link href="http://localhost:4000/code/2019/12/16/cxze60-day01.html" rel="alternate" type="text/html" title="【60天重学左耳】Day01-分布式架构的发展背景以及难点" /><published>2019-12-16T20:00:00+08:00</published><updated>2019-12-16T20:00:00+08:00</updated><id>http://localhost:4000/code/2019/12/16/cxze60-day01</id><content type="html" xml:base="http://localhost:4000/code/2019/12/16/cxze60-day01.html">&lt;p&gt;&lt;a href=&quot;https://time.geekbang.org/column/article/177414?utm_term=zeusL3AA0&amp;amp;utm_source=wechat&amp;amp;utm_medium=chongxuedaka&quot;&gt;左耳朵耗子带你重学《左耳听风》&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;打卡Day1：今天学习了《21｜分布式系统架构的冰与火》和《22｜从亚马逊的实践，谈分布式系统的难点》，我的收获如下：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用分布式系统主要原因包括：增大系统容量；加强系统可用。&lt;/li&gt;
  &lt;li&gt;分布式系统并不是完美的技术方案，解决了问题的同时会带来其他问题，没有银弹，对于架构师来说是一种权衡。&lt;/li&gt;
  &lt;li&gt;了解了分布式系统和传统单体架构的各种优缺点。优点是解决了“单点”和“性能容量”问题；缺点是系统设计、管理和运维变得困难和复杂。&lt;/li&gt;
  &lt;li&gt;分布式系统大体经历了单体架构、SOA架构和微服务架构三个阶段。&lt;/li&gt;
  &lt;li&gt;微服务架构需要好的微服务PaaS平台来支撑，简化集成测试、运维和服务管理。&lt;/li&gt;
  &lt;li&gt;分布式架构思想实践最早的公司亚马逊，早在2002年就颁布了很有前瞻性的几条架构规定，最重要的一条：所有程序模块都要通过接口来访问数据。AWS由此诞生。&lt;/li&gt;
  &lt;li&gt;亚马逊在运维分布式服务有几点值得借鉴：分布式团队架构、严重故障整体查错、开发人员做所有事情（测试、运维）、崇尚简化和自动化、内部服务和外部服务一致对待。&lt;/li&gt;
  &lt;li&gt;分布式服务架构是需要从组织，到软件工程，再到技术上的一个大的改造，需要比较长的时间来磨合和改进。&lt;/li&gt;
  &lt;li&gt;分布式系统构建最好统一编程语言，避免异构系统带来的各种不标准问题，简化开发、测试和运维标准。&lt;/li&gt;
  &lt;li&gt;分布式系统需要定义出关键服务调用的主要路径，为运维提供管理依据。不但要拆分服务，还要为每个服务拆分相应的数据库。&lt;/li&gt;
  &lt;li&gt;分布式系统出现故障不可怕，故障恢复时间过长或影响面过大才可怕。监控指标不需要太多，SLA要求我们定义出关键指标。在设计或运维系统时都要考虑如何减轻故障，争取做到，人管代码，代码管机器，人不管机器。&lt;/li&gt;
  &lt;li&gt;系统通常可分为四层：基础层、平台层、应用层和接入层。任何一层的问题都会导致整体的问题，需要有统一的视图和管理降低运维复杂度。多层架构的运维分工，一定要重视协作是否统一和规范。&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">左耳朵耗子带你重学《左耳听风》</summary></entry><entry><title type="html">【读书笔记】自在独行——写给每个孤独的行路人</title><link href="http://localhost:4000/2019/10/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%87%AA%E5%9C%A8%E7%8B%AC%E8%A1%8C-%E5%86%99%E7%BB%99%E6%AF%8F%E4%B8%AA%E5%AD%A4%E7%8B%AC%E7%9A%84%E8%A1%8C%E8%B7%AF%E4%BA%BA.html" rel="alternate" type="text/html" title="【读书笔记】自在独行——写给每个孤独的行路人" /><published>2019-10-07T00:00:00+08:00</published><updated>2019-10-07T00:00:00+08:00</updated><id>http://localhost:4000/2019/10/07/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91%E8%87%AA%E5%9C%A8%E7%8B%AC%E8%A1%8C%E2%80%94%E2%80%94%E5%86%99%E7%BB%99%E6%AF%8F%E4%B8%AA%E5%AD%A4%E7%8B%AC%E7%9A%84%E8%A1%8C%E8%B7%AF%E4%BA%BA</id><content type="html" xml:base="http://localhost:4000/2019/10/07/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%87%AA%E5%9C%A8%E7%8B%AC%E8%A1%8C-%E5%86%99%E7%BB%99%E6%AF%8F%E4%B8%AA%E5%AD%A4%E7%8B%AC%E7%9A%84%E8%A1%8C%E8%B7%AF%E4%BA%BA.html">&lt;h1 id=&quot;读书笔记自在独行写给每个孤独的行路人&quot;&gt;【读书笔记】自在独行——写给每个孤独的行路人&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;书名：自在独行——写给每个孤独的行路人&lt;/li&gt;
  &lt;li&gt;作者：贾平凹&lt;/li&gt;
  &lt;li&gt;出版社：长江文艺出版社&lt;/li&gt;
  &lt;li&gt;阅读日期：2019年10月5日～10月7日&lt;/li&gt;
  &lt;li&gt;耗时：17小时&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;书籍背景&quot;&gt;书籍背景&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;独行是一场心灵的隐居，真正的洒脱来自内心安宁。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一章 孤独地走向未来。生命的睿智——从容是真&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二章 默默看世界。人世的悲心——宽释是福&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第三章 独自走一走。大地的魂灵——有敬无畏&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第四章 独处的安宁。万物的情怀——乐以忘忧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第五章 自在的禅意。天空的禅意——行于天地&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;书摘笔记&quot;&gt;书摘/笔记&lt;/h2&gt;

&lt;h3 id=&quot;目录第二章&quot;&gt;《目录——第二章》&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;世上的事，认真不对，不认真更不对，执着不对，一切视作空也不对，平平常常，自自然然，如上山拜佛，见佛像了就磕头，磕了头，佛像还是佛像，你还是你——生活之累就该少下来了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：平常心对待身边的人和事，不过分较真。==&lt;/p&gt;

&lt;h3 id=&quot;孤独地走向未来p48&quot;&gt;《孤独地走向未来》P48&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;好多人在说自己孤独，说自己孤独的人其实并不孤独。孤独不是受到了冷落和遗弃，而是无知己，不被理解。真正的孤独不言孤独，偶尔做些长啸，如我们看到的兽。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我见过相当多的郁郁寡欢者，也见过一些把皮肤和毛发弄得怪异的人，似乎要做孤独，这不是孤独，是孤僻，&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;尘世上并不会轻易让一个人孤独的，群居需要一种平衡，嫉妒而引发的诽谤、扼杀、羞辱、打击和迫害，你若不再脱颖，你将平凡，你若继续走，走，终于使众生无法赶超了，众生就会向你欢呼和崇拜，尊你是神圣。神圣是真正的孤独。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;走向孤独的人难以接受怜悯和同情。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：耐得住寂寞，看得见繁华。==&lt;/p&gt;

&lt;h3 id=&quot;好读书p54&quot;&gt;《好读书》P54&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;好读书不一定都是好丈夫，好读书不一定都有好人缘，好读书性情古怪。但是能读书必有读书的好，譬如能识天地之大，能晓人生之难，有自知之明，有预料之先，不为苦而悲，不受宠而欢，寂寞时不寂寞，孤单时不孤单，所以绝权欲，弃浮华，潇洒达观，于嚣烦尘世而自尊自重自强自立不卑不亢不谄。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：读书不带目的，总有收获。==&lt;/p&gt;

&lt;h3 id=&quot;舍得p59&quot;&gt;《舍得》P59&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;会活的人，或者说取得成功的人，其实懂得了两个字：舍得。不舍不得，小舍小得，大舍大得。回顾我们经历过的事吧，许多时候我们因没有小忍而坏了大谋，许多时候我们吃了一点亏懊丧不已，不久却赢取了利好，为了保持我们的本真没有被一时的浮华迷惑，声名太盛则又使我们失去了行动的自在。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：一个人一生中能做成一件事，就很了不起了。==&lt;/p&gt;

&lt;h3 id=&quot;看人p72&quot;&gt;《看人》P72&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;上帝无言，冷眼看世上忙人。到了这时，你境界再次升华，恍惚间你就是上帝在看这一切，你醒悟到人活着是多么无聊又多么有意义，人世间是多么简单又多么复杂。这样，在街头上看一回人的风景，犹如读一本历史，一本哲学，你从此看问题、办事情，心胸就不再那么窄了，目光就不那么短了，不会为蝇头小利去钩心斗角，不会因一时荣辱而狂妄和消沉，人既然如蚂蚁一样来到世上，忽生忽死，忽聚忽散，短短数十年里，该自在就自在吧，该潇洒就潇洒吧，各自完满自己的一段生命，这就是生存的全部意义了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：珍惜每一天，做自己喜欢的事。==&lt;/p&gt;

&lt;h3 id=&quot;名人p101&quot;&gt;《名人》P101&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;世事真闹不明白，你忽然浪成了一个名人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;你成了名人，你的一切都令人们刮目相看，你本来是很丑的，但总有人在你的丑貌里寻出美的部分，你实在是邋遢，头发乱如茅草，胡子不刮，衣服发皱，但现在你是名人，名人的不修边幅是别一种的潇洒呀！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;你不愿别人以名人对待你，你又毕竟意识到自己是名人而又处处以名人来限制自己。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：名人放个屁都真香，成为名人也要付出代价。==&lt;/p&gt;

&lt;h3 id=&quot;朋友p108&quot;&gt;《朋友》P108&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;地球上人类最多，但你一生的交往最多的却不外乎方圆几里或十几里，朋友的圈子其实就是你人生的世界，你为名为利的奋斗历程就是朋友的好与恶的历史。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：交朋友贵在真字。==&lt;/p&gt;

&lt;h3 id=&quot;说奉承p112&quot;&gt;《说奉承》P112&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;每个人少不了有奉承，再是英雄，多么正直，最少他在恋爱时有奉承行为。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;奉承话吧——并不是错误，它发乎于天性，出自于真诚的热爱美好。而不能忍受的，浑身要起鸡皮疙瘩，发麻的，是对一些并不发乎于真诚的奉承。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;奉承是要得法的，会奉承的人都是语言大师。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：真诚的赞美。==&lt;/p&gt;

&lt;h3 id=&quot;关于父子p126&quot;&gt;《关于父子》P126&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;一个儿子酷像他的父亲，做父亲的就要得意了。世上有了一个小小的自己的复制品，时时对着欣赏，如镜中的花水中的月，这无疑比仅仅是个儿子自豪得多。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;做父亲的都希望自己的儿子像蛇蜕皮一样的始终是自己，但儿子却相当愿意像蝉蜕壳似的裂变。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;中国的传统里，有“严父慈母”之说，所以在初为人父时可以对任何事情宽容放任，对儿子却一派严厉，少言语，多板脸，动辄吼叫挥拳。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;儿子稍稍独立，儿子与父亲的意见就不统一了，愈是与父亲相悖，这儿子就愈是优秀人物。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;只有在儿子开始做了父亲，这父亲才有觉悟对自己的父亲好起来，可以与父亲在一条凳子上坐下，可以翘二郎腿，共同地衔一支烟吸，共同拔下巴上的胡须。但是，做父亲的已经丧失了一个男人在家中的真正权势后，对于儿子的能促膝长谈的态度却很有几分苦楚，或许明白这如同一个得胜的将军盛情款待一个败将只能显得人家宽大为怀一样，儿子的恭敬即使出自真诚，父亲在本能的潜意识里仍觉得这是一种耻辱，于是他开始钟爱起孙子了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;但爷爷对孙子不论怎样地好，孙子都是不记恩地。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;作为男人的一生，是儿子也是父亲。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：所有的事情只有自己亲身经历过，才可能理解的更深刻，父亲说是没有用的。==&lt;/p&gt;

&lt;h3 id=&quot;说孩子p131&quot;&gt;《说孩子》P131&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;有了孩子，谁都希望孩子小时候乖，长大了有出息。结婚生育，原本是极自然的事，瓜熟蒂落，草大结籽，现在把生儿育女看得不得了了，照仪器呀，吃保胎药呀，听音乐看画报胎教呀，提前去医院，羊水未破就呼天喊地，结果十个有九个难产，八个有七个产后无奶。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;做父母的全盼望孩子出人头地、就闹出许多畸形的事体来。有人以教孩子背唐诗为荣耀，家有客人，就呼出小儿，一首一首闭了眼睛往下背。但我从没见过小时能背唐诗的“神童”长大了有作为的人。有人省吃俭用地买钢琴买绘画的颜料笔纸呀，用金钱加拳头要培养个音乐家和画家，结果只能培养出一大批挣便宜钱的半通不通的“辅导”。社会是各色人等组成的，是什么神就归什么位，父母养育儿女，生下来养活了，施之于正常的教育就完成了责任，而硬要是河不让流，盛方缸里让成方，装圆盆中让成圆，没有不徒劳的，如果人人都是撒切尔夫人，人人都是艺术家，这个世界将是多么可怕！接触这样的大人们多了，就会发现，愈是这般强烈地要培养儿女的人，愈是这人活得平庸。他自己活得没自信了，就寄托儿女。儿女的生命是属于儿女的，不必担心没有你的设计儿女就一事无成，相反，生命是不能承受之轻和之重的，教给了他做人的起码道德和奋斗的精神，有正规的学校传授知识和技能，更有社会的大学校传授人生的经验，每一个生命自然而然地会发出自己灿烂的光芒的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;可以说，人是很难认识自己的，这如眼睛看不见眼睛一样。但认识自己，设计自己却是人至关重要的事！天才不是三百年才出现一个两个的，天才是每个人都存在的，关键是是否发现自己身上的天才潜能。遗憾的是很多很多的人至死没有发现和发展自己的天才潜能，所以，伟大的人物总是少，众生才芸芸。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我也是一个父亲，我也为我的独生女儿焦虑过，生气过，甚至责骂过，也曾想，我的孩子如果一生下来就有我当时的思维和见解多好啊，为什么我从一学起，好容易学些文化了，我却一天天老起来，我的孩子又是从一学起？！但当我慢慢产生了我的观点后，我不再以我的意志去塑造孩子，只要求她有坚韧不拔的精神，只强调和引导她从小干什么事情都必须有兴趣，譬如踢沙包，你就尽情地去踢，画图画，你就随心所欲地画。我反对要去做什么家，你首先做人，做普通的人。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;我虽然常常看着小学生、中学生不分昼夜地在书桌前用功，心中充满了悲哀——大人们都在自己的岗位上消极怠工，却把恶果转嫁于孩子。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：帮孩子发现自己身上特有的潜能，让每一个生命自然而然地发出自己灿烂的光芒。==&lt;/p&gt;

&lt;h3 id=&quot;说房子p135&quot;&gt;《说房子》P135&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;人活在世上需要房子，人死了也需要房子，乡下的要做棺、拱墓，城里的有骨灰盒。其实，人是从泥土里来的，最后又化为泥土，任何形式的房子，生前死后，装什么呢？有一个字，囚，是人被四周围住了。房子是囚人的，人寻房子，自己把自己囚起来，这有点像投案自首。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;书上写着的是：家是避风港，家是安乐窝。有房子当然不能算家，有妻子儿女却没有房，也不算完整的家。房间如何布置，家庭如何经营都不重要，睡草铺如果能起鼾声，绝对比睡在席梦思沙发床上辗转不眠为好。用不着热羡和嫉妒他人的千般好，用不着哀叹和怨恨自己的万般苦，也用不着耻笑和贱看别人不如自己，生命的快乐并不在于穷与富、贵与贱。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：房子是身外之物，生不带来死不带去，家人才是更重要的。==&lt;/p&gt;

&lt;h3 id=&quot;说女人p143&quot;&gt;《说女人》P143&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;独立做女人的人格，热情地对待生活，对待自己，为自己而活，活得美好，女人越会对男人产生永久的吸引，这就是平等，与男人平等是真正地活出了女人味。有了这种与男人平等地生存于世上，平等地做夫妻的女人味，或许长得漂亮，或许长得不漂亮，但自然而然地就产生了你的态。态是古时用语，态无法言说，类似当今人所谈的气质和风度。女人的漂亮不会永驻，女人的态却长伴终生。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：女人要活出自己，活出自己的态。==&lt;/p&gt;

&lt;h3 id=&quot;说美容p145&quot;&gt;《说美容》P145&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;化妆的盛行，使女人越来越失去自信。谁还敢素面朝天？“女容为悦”从古代一路喊下来，现在似乎已是生活得越好，物质越丰富，女人的所悦者越少，情爱越难得。因为现代城市的女人就比乡下女人化妆得严重。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;打扮一旦成了社会时尚，风气靡丽，必然少了清正之气。过去有一句名言：最容易打扮的是历史和小姑娘。现在呢？没有学问的打扮得更像有学问，不是艺术家的打扮得更像艺术家，戏比生活逼真，谎言比真理流行。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;当一切都在打扮，全没有了真面目示人的时候，最美丽的打扮是不打扮。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：打扮要得当，不要失去了本真的模样。==&lt;/p&gt;

&lt;h3 id=&quot;说死p152&quot;&gt;《说死》P152&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;既然死是人的最后归宿，既然寿的长短是闻道的迟早，既然闻道而死去的时候是一种解脱和幸福，对于死应该坦然。而恐惧的人，不能正确地面对死去，也绝不会正确地面对活着。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;不管怎样地美好来到人世的情景，又怎样地不愿去死，最后都是死了。这人生的一趟旅游是旅游好了还是旅游不好，每个人都有自己的体会。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;==批注：人固有一死，或轻于鸿毛，或重于泰山，都是每个人自己的选择，没有好坏对错。==&lt;/p&gt;

&lt;h2 id=&quot;总结收获&quot;&gt;总结&amp;amp;收获&lt;/h2&gt;

&lt;p&gt;写文章要随心所欲，写出自己内心真正想表达的东西，切忌生搬硬套。&lt;/p&gt;</content><author><name></name></author><summary type="html">【读书笔记】自在独行——写给每个孤独的行路人</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2019/09/15/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-09-15T18:16:14+08:00</published><updated>2019-09-15T18:16:14+08:00</updated><id>http://localhost:4000/jekyll/update/2019/09/15/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2019/09/15/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">【读书笔记】让云触手可及——微软云计算实践指南</title><link href="http://localhost:4000/2019/09/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%AE%A9%E4%BA%91%E8%A7%A6%E6%89%8B%E5%8F%AF%E5%8F%8A-%E5%BE%AE%E8%BD%AF%E4%BA%91%E8%AE%A1%E7%AE%97%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97.html" rel="alternate" type="text/html" title="【读书笔记】让云触手可及——微软云计算实践指南" /><published>2019-09-09T00:00:00+08:00</published><updated>2019-09-09T00:00:00+08:00</updated><id>http://localhost:4000/2019/09/09/%E3%80%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E3%80%91%E8%AE%A9%E4%BA%91%E8%A7%A6%E6%89%8B%E5%8F%AF%E5%8F%8A%E2%80%94%E2%80%94%E5%BE%AE%E8%BD%AF%E4%BA%91%E8%AE%A1%E7%AE%97%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97</id><content type="html" xml:base="http://localhost:4000/2019/09/09/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E8%AE%A9%E4%BA%91%E8%A7%A6%E6%89%8B%E5%8F%AF%E5%8F%8A-%E5%BE%AE%E8%BD%AF%E4%BA%91%E8%AE%A1%E7%AE%97%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97.html">&lt;h1 id=&quot;读书笔记让云触手可及微软云计算实践指南&quot;&gt;【读书笔记】让云触手可及——微软云计算实践指南&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;书名：让云触手可及——微软云计算实践指南&lt;/li&gt;
  &lt;li&gt;作者：赵立威、方国伟&lt;/li&gt;
  &lt;li&gt;出版社：电子工业出版社&lt;/li&gt;
  &lt;li&gt;阅读日期：2019年9月8日～9月15日&lt;/li&gt;
  &lt;li&gt;耗时：8小时&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;云计算的前世今生&quot;&gt;云计算的前世今生&lt;/h2&gt;

&lt;h3 id=&quot;我们需要什么样的计算&quot;&gt;我们需要什么样的计算&lt;/h3&gt;

&lt;p&gt;计算模式的演变：
主机计算 -&amp;gt; CS模式 -&amp;gt; Web模式 -&amp;gt; 云计算&lt;/p&gt;

&lt;h3 id=&quot;什么是云计算&quot;&gt;什么是云计算&lt;/h3&gt;

&lt;p&gt;云计算（英语：cloud computing），是一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备，使用服务商提供的计算机基建作计算和资源。（https://zh.w ikipedia.org/wiki/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97）&lt;/p&gt;

&lt;p&gt;云计算是一个提供便捷的可通过网络访问的一个可定制的计算资源共享池能力的模式（计算资源包括网络、服务器、存储、应用和服务）；这些资源能够快速部署，并只需要很少的管理工作或与服务供应商很少的交互。（美国国家技术和标准研究院 NIST，National Institute of Standards and Technology）&lt;/p&gt;

&lt;p&gt;适合云计算的典型场景&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;间断性应用场景&lt;/li&gt;
  &lt;li&gt;快速增长应用场景&lt;/li&gt;
  &lt;li&gt;需求突增应用场景&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么称为云计算？
想一想我们以前在画应用系统架构图的时候用什么图形来表示互联网或Web。没错，是云。这正是人们把这种基于互联网和Web的计算形象地称为云计算的最直接原因。&lt;/p&gt;

&lt;h3 id=&quot;云计算的特点&quot;&gt;云计算的特点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;按需服务&lt;/li&gt;
  &lt;li&gt;资源池&lt;/li&gt;
  &lt;li&gt;高可扩展性&lt;/li&gt;
  &lt;li&gt;弹性服务&lt;/li&gt;
  &lt;li&gt;自服务、自动化和虚拟化&lt;/li&gt;
  &lt;li&gt;便捷网络访问&lt;/li&gt;
  &lt;li&gt;服务可度量&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;云计算的spi模型&quot;&gt;云计算的SPI模型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;软件即服务（SaaS, Software as a Service）&lt;/li&gt;
  &lt;li&gt;平台即服务（PaaS, Platform as a Service）&lt;/li&gt;
  &lt;li&gt;基础设施即服务（IaaS, Infrastructure as a Service）&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;saas特点&quot;&gt;SaaS特点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;用户主要通过Web浏览器来使用互联网上的软件服务&lt;/li&gt;
  &lt;li&gt;多租户（Multi-tenant）&lt;/li&gt;
  &lt;li&gt;用户不必购买软件，只需按需租用软件或通过广告模式免费使用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;典型应用：在线邮件服务、网络会议、在线杀毒、在线CRM、在线HR、在线进销存、在线项目管理等。&lt;/p&gt;

&lt;p&gt;针对用户：应用最终用户&lt;/p&gt;

&lt;h4 id=&quot;paas特点&quot;&gt;PaaS特点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;提供应用服务平台的编程接口，开发人员根据平台接口进行应用程序开发&lt;/li&gt;
  &lt;li&gt;提供应用的托管平台，针对平台开发的应用程序一般只能部署在该平台上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;典型应用：Windows Azure平台、Google App Engine等&lt;/p&gt;

&lt;p&gt;针对用户：开发人员&lt;/p&gt;

&lt;h4 id=&quot;iaas特点&quot;&gt;IaaS特点&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;以服务的形式提供虚拟硬件资源，包括服务器、存储、网络等&lt;/li&gt;
  &lt;li&gt;用户对基础设施环境需要自己进行系统管理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;典型应用：AWS（Amazon Web Service）的弹性计算服务（EC2）、简单存储服务（S3）&lt;/p&gt;

&lt;p&gt;针对用户：IT管理人员&lt;/p&gt;

&lt;h3 id=&quot;云计算的部署模型&quot;&gt;云计算的部署模型&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;公有云&lt;/li&gt;
  &lt;li&gt;私有云&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;公有云&quot;&gt;公有云&lt;/h4&gt;

&lt;p&gt;有时也称外部云，云计算的服务对象没有特定限制。&lt;/p&gt;

&lt;p&gt;优点：对于使用者，应用及数据都存放在公有云平台上，自己无须前期的大量投资和漫长的建设过程。&lt;/p&gt;

&lt;p&gt;问题：用户对应用和数据的安全、隐私等存在担心，可用性不受使用者控制。&lt;/p&gt;

&lt;h4 id=&quot;私有云&quot;&gt;私有云&lt;/h4&gt;

&lt;p&gt;有时也称内部云，组织机构建设的专供自己使用的云平台，比较适合有众多分支机构的大型企业或政府部门。&lt;/p&gt;

&lt;p&gt;优点：部署在企业内部网络，数据安全性、系统可用性都可由自己控制。&lt;/p&gt;

&lt;p&gt;问题：依然有大量的前期投资，还是传统的商业模型；规模相对公有云一般来说要小得多，经济学上的规模效应无法充分发挥
本质上是机构应用云计算技术来提高自身服务效率的一种方式&lt;/p&gt;

&lt;h4 id=&quot;混合云&quot;&gt;混合云&lt;/h4&gt;

&lt;p&gt;是一种用户使用云计算服务的方式。指用户既使用了公有云，又使用了私有云。&lt;/p&gt;

&lt;h4 id=&quot;发展趋势&quot;&gt;发展趋势&lt;/h4&gt;

&lt;p&gt;传统数据中心 -&amp;gt; 虚拟化数据中心 -&amp;gt; 私有云 -&amp;gt; 公有云&lt;/p&gt;

&lt;h3 id=&quot;云计算对it产业的影响&quot;&gt;云计算对IT产业的影响&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;硬件模型的改变
以前：选择大型服务器或高端小型机
现在：向采用标准化、低成本的硬件，通过软件方式横向扩展&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;应用模型的改变
以前：设计时面对传统的物理资源，非功能性需求往往采用手工配置方式实现
现在：快速构建高可用并几乎可以无限扩展的应用；用户消费服务的方式更加灵活，大量计算工作迁移到云计算平台上，终端设备计算要求相对有所下降&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服务模型的改变
以前：销售软件许可证，用户要购买软件和采购与之配套的硬件，并需要专人运维
现在：按照用户使用量来计费，免除用户对硬件、网络安全设备和软件升级维护的支出&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;云计算的价值&quot;&gt;云计算的价值&lt;/h3&gt;

&lt;h4 id=&quot;降低成本&quot;&gt;降低成本&lt;/h4&gt;

&lt;p&gt;传统IT服务方式下，不同应用之间没有硬件共享能力，对硬件的配置要求是所有应用系统高峰值的总和。&lt;/p&gt;

&lt;p&gt;在私有云方式下，不同应用之间可以共享一个资源池，理想状态下对硬件需求是所有应用系统累加的高峰时刻。&lt;/p&gt;

&lt;p&gt;当不同应用之间的资源需求在时间上比较分散时，从资源利用率方面私有云的效果会更加明显。应用程序数量越多，相互之间差异的可能性越大，越能显现云计算的规模效应和共享优势。&lt;/p&gt;

&lt;h4 id=&quot;把固定成本转变为可变的运营成本&quot;&gt;把固定成本转变为可变的运营成本&lt;/h4&gt;

&lt;p&gt;数据中心及软硬件需要前期投资，从财务上来看属于固定资产，按照会计原则根据使用年限折旧，不能准确反映资源使用率和业务的发展情况。&lt;/p&gt;

&lt;p&gt;采用云计算的方式，可以大大提高公司整体的固定资产投资回报率，让企业更有效的分配在战略业务和IT服务之间的投入。&lt;/p&gt;

&lt;h4 id=&quot;云计算对不同企业的价值&quot;&gt;云计算对不同企业的价值&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;价值&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;大企业&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;中小企业&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ISV&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;降低企业IT投资&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;专注核心业务创新&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;灵活性&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;多租户&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;更好的运维&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;降低IT进入门槛&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;更低的开发成本和运维成本&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;√&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;提升用户体验&quot;&gt;提升用户体验&lt;/h4&gt;

&lt;p&gt;使用户从底层复杂的技术细节中解放了出来，可以把注意力放在相对高级、更靠近业务的工作中去。&lt;/p&gt;

&lt;p&gt;传统方式下，用户申请计算资源需要等待几天、几周甚至是几个月；云计算能够动态分配资源，用户一般只需要几分钟甚至更短的时间就可以得到想要的资源。&lt;/p&gt;

&lt;p&gt;还可以帮助用户高效完成工作。高效不一定指能多快的做事情，而是有多少事由于自动化不用做了。&lt;/p&gt;

&lt;h4 id=&quot;绿色环保&quot;&gt;绿色环保&lt;/h4&gt;

&lt;p&gt;相同计算能力下，云计算数据中心的能效指标（PUE，Power Usage Effectiveness）比传统数据中心能节约60%以上的电能消耗。&lt;/p&gt;

&lt;h3 id=&quot;云生态系统&quot;&gt;云生态系统&lt;/h3&gt;

&lt;p&gt;三个核心角色&lt;/p&gt;

&lt;p&gt;使用者：各种云计算服务的最终使用者，包括个人消费者、政府、教育和企业客户。&lt;/p&gt;

&lt;p&gt;提供者：各种云计算服务的提供商，包括SaaS、PaaS和IaaS提供商。&lt;/p&gt;

&lt;p&gt;建设者：为提供商提供各种基础资源、解决方案和服务的供应商，如软硬件产品、信息安全、支付、网络服务等。&lt;/p&gt;

&lt;p&gt;云计算的先锋：亚马逊AWS。
对于从事电子商务的亚马逊来说，为了保证其在线服务在圣诞节前夕的购物旺季能够正常运行，就必须配置能够满足高峰需求的软硬件设施。为了充分利用这些其他非高峰时期闲置的IT资源和已有的技术团队，开始对外提供计算和存储的租用服务，逐渐形成了一系列的AWS服务。&lt;/p&gt;

&lt;h3 id=&quot;云计算带来的新挑战&quot;&gt;云计算带来的新挑战&lt;/h3&gt;

&lt;p&gt;人们往往过高地估计一个新概念在短期内的作用，然而又过低地估计它长期的影响。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;新的IT基础设施挑战&lt;/li&gt;
  &lt;li&gt;新的用户隐私挑战&lt;/li&gt;
  &lt;li&gt;新的安全挑战&lt;/li&gt;
  &lt;li&gt;新的数据主权挑战&lt;/li&gt;
  &lt;li&gt;新的立法挑战&lt;/li&gt;
  &lt;li&gt;新的标准挑战&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;企业云计算路线图&quot;&gt;企业云计算路线图&lt;/h2&gt;

&lt;h3 id=&quot;cio看云计算&quot;&gt;CIO看云计算&lt;/h3&gt;

&lt;h4 id=&quot;从soa到云计算&quot;&gt;从SOA到云计算&lt;/h4&gt;

&lt;p&gt;业务与IT实现有一个差异，而架构是沟通两者的一个桥梁。SOA的出现为IT人员与业务人员进行沟通提供了一个良好的机会和基础。&lt;/p&gt;

&lt;p&gt;SOA引入松耦合的架构，即企业服务总线（ESB，Enterprise Service Bus），把业务集成为相互连接的、可重复的任务或服务，从而增加业务流程的灵活性。&lt;/p&gt;

&lt;p&gt;SOA让IT部门学会从服务的角度考虑技术的应用。不用关心服务具体运行在什么平台之上，也不用关心服务实例的扩展性如何，而只需要关心服务的质量（QOS，Quality Of Service）和服务水平协议（SLA，Service Level Agreement）是否满足。&lt;/p&gt;

&lt;p&gt;SOA关注在业务与IT的结合之上，而云计算关注在让IT作为一种服务来供应的模式，两者可以非常好的结合在一起，从不同角度为企业提供灵活性。&lt;/p&gt;

&lt;h4 id=&quot;云计算服务的管理&quot;&gt;云计算服务的管理&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;服务的监控和测量&lt;/li&gt;
  &lt;li&gt;服务目录&lt;/li&gt;
  &lt;li&gt;配置管理数据库&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;如何选择云计算&quot;&gt;如何选择云计算&lt;/h3&gt;

&lt;h4 id=&quot;私有还是公有&quot;&gt;私有还是公有&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;IT设施的位置&lt;/li&gt;
  &lt;li&gt;基础设施的差异&lt;/li&gt;
  &lt;li&gt;商务模式&lt;/li&gt;
  &lt;li&gt;控制程度的不同&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;不同企业对云计算的策略&quot;&gt;不同企业对云计算的策略&lt;/h4&gt;

&lt;p&gt;从IT服务水平的角度，公有云让小企业与大企业站在同一个水平线上成为了一种可能。&lt;/p&gt;

&lt;h4 id=&quot;发展路线&quot;&gt;发展路线&lt;/h4&gt;

&lt;p&gt;私有云计算方面的投资可为企业未来部署公有云做准备，不仅仅是技术上的变化，也是流程、业务接口，甚至是文化上的变化。&lt;/p&gt;

&lt;h4 id=&quot;云计算服务提供商的选择&quot;&gt;云计算服务提供商的选择&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;服务的类别&lt;/li&gt;
  &lt;li&gt;计费情况&lt;/li&gt;
  &lt;li&gt;标准遵循和认证&lt;/li&gt;
  &lt;li&gt;安全性&lt;/li&gt;
  &lt;li&gt;与已有系统的集成&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;不适合云计算的场景&quot;&gt;不适合云计算的场景&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;安全和合规性&lt;/li&gt;
  &lt;li&gt;硬件依赖&lt;/li&gt;
  &lt;li&gt;与现有应用集成&lt;/li&gt;
  &lt;li&gt;实时应用&lt;/li&gt;
  &lt;li&gt;缺乏需求&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;迎接云计算&quot;&gt;迎接云计算&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;增加虚拟化的投资和准备&lt;/li&gt;
  &lt;li&gt;采用标准化的和可扩展的硬件设备&lt;/li&gt;
  &lt;li&gt;统一虚拟和硬件环境的管理&lt;/li&gt;
  &lt;li&gt;优化IT服务流程&lt;/li&gt;
  &lt;li&gt;调整应用架构&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;采用云计算的五大步骤&quot;&gt;采用云计算的五大步骤&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;制定云计算战略&lt;/li&gt;
  &lt;li&gt;评估和调研&lt;/li&gt;
  &lt;li&gt;制定云计算发展路线&lt;/li&gt;
  &lt;li&gt;展开试点&lt;/li&gt;
  &lt;li&gt;实施推广&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;实施云计算的五大建议&quot;&gt;实施云计算的五大建议&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;拥抱变化&lt;/li&gt;
  &lt;li&gt;马上行动&lt;/li&gt;
  &lt;li&gt;新的决策选择&lt;/li&gt;
  &lt;li&gt;从外包的角度考虑云计算服务&lt;/li&gt;
  &lt;li&gt;制定后备计划&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;云的基石虚拟化360度&quot;&gt;云的基石：虚拟化360度&lt;/h2&gt;

&lt;h3 id=&quot;云计算与虚拟化技术&quot;&gt;云计算与虚拟化技术&lt;/h3&gt;

&lt;p&gt;虚拟化是将一个计算机资源从另一个计算机资源当中分离的技术。&lt;/p&gt;

&lt;p&gt;服务器虚拟化，或称计算机虚拟化，就是将操作系统和应用程序打包在一起以形成一个虚拟机，然后在运行主操作系统或Hypervisor（一个瘦软件层，提供硬件的基本接口）的物理服务器上运行。此虚拟机并不依赖物理服务器操作系统。这使得单台物理服务器可运行多个虚拟机，同时提供分离和安全防护，每个虚拟机都像在自己的硬件上运行一样。&lt;/p&gt;

&lt;h3 id=&quot;服务器虚拟化技术&quot;&gt;服务器虚拟化技术&lt;/h3&gt;

&lt;p&gt;可将未充分利用的服务器工作负载整合至可充分利用的机器上，减少物理服务器的数量并因较少的硬件、用电和管理负荷而降低成本，还可建立更为动态的IT基础架构。&lt;/p&gt;

&lt;h4 id=&quot;基本原理&quot;&gt;基本原理&lt;/h4&gt;

&lt;p&gt;根据虚拟化层（VMM，Virtual Machine Monitor）和物理硬件之间的关系处理方式，有三种常见的体系结构：
Type-2 VMM：创建一个运行时环境，进程可以在此环境中执行一组指令，而无须依赖主机系统。隔离的是不同进程，允许单个应用程序在不同的OS上运行。
应用实例：Java虚拟机，即JVM。&lt;/p&gt;

&lt;p&gt;Hybrid VMM：在主机OS上运行并帮助创建上层虚拟机，只在部分时间运行虚拟机。VMM会极大增加开销，不适合资源密集的工作负载。适用于轻量级的虚拟机，同时对物理硬件资源的调度效率没有较高要求。
应用实例：VMware Workstation。&lt;/p&gt;

&lt;p&gt;Type-1 VMM：直接在硬件上方运行，最初由IBM于20世纪60年代针对大型机系统而设计，最近连同各种解决方案（包括Windows Hyper-V）在x86平台上提供。
Typer-1 VMM目前的两种常见实现：微内核化和整体化。
整体化管理程序方法，在单层内托管管理程序VMM，还包括大部分必需组件（例如内核、设备驱动程序和I/O堆栈）。应用实例：VMware ESX。
微内核化方法，使用非常瘦的专用管理程序，仅执行核心任务以确保分区隔离和内存管理，不包括I/O堆栈和设备驱动程序。应用实例：Hyper-V。&lt;/p&gt;

&lt;h4 id=&quot;hyper-v体系架构&quot;&gt;Hyper-V体系架构&lt;/h4&gt;

&lt;p&gt;通过分区的方式实现隔离。分区是指一组隔离的单元，被分配了物理内存空间与虚拟处理器资源，其中运行着操作系统。&lt;/p&gt;

&lt;p&gt;父分区，运行着Windows Server，其中的虚拟化堆栈（Virtualization Stack）可以直接访问物理设备。&lt;/p&gt;

&lt;p&gt;通过父分区，可以创建子分区并在其中运行来宾操作系统（Guest Operating System）。&lt;/p&gt;

&lt;p&gt;子分区本身并不能访问物理处理器，它们只有虚拟的处理器同时运行在虚拟的内存地址空间，各个子分区的虚拟内存空间是相互独立的。Hypervisor层执行处理器中断。&lt;/p&gt;

&lt;p&gt;同时，子分区对其他硬件资源也无法直接访问，它们通过虚拟设备（Virtual Device，VDev）的方式访问硬件。对虚拟设备的请求一般由运行在子分区中的虚拟服务用户端（Virtualization Service Consumer，VSC），通过VMBus或者Hypervisor层转到父分区，父分区通过其中运行的虚拟服务端程序（Virtualization Service Provider，VSP）处理。&lt;/p&gt;

&lt;p&gt;即 VDev -&amp;gt; VSC &amp;lt;-&amp;gt; VMBus &amp;lt;-&amp;gt; VSP&lt;/p&gt;

&lt;h3 id=&quot;虚拟化的管理&quot;&gt;虚拟化的管理&lt;/h3&gt;

&lt;p&gt;一旦虚拟化，或基于虚拟化技术的云计算进入实际应用阶段，几乎所有的用户都会将工作重心转至对IT环境的管理。只有真正高效灵活的管理方法与管理工具，才能切实实现虚拟化所带来的价值。&lt;/p&gt;

&lt;p&gt;管理挑战包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何有效管理物理机与虚拟机混合的IT环境。&lt;/li&gt;
  &lt;li&gt;如何管理不同的虚拟化技术。&lt;/li&gt;
  &lt;li&gt;针对虚拟化技术本身实现高效管理。&lt;/li&gt;
  &lt;li&gt;成本。管理产品与工具本身获取成本；管理工具在长期运营中其整合度、二次开发、运维人力所带来的成本。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;企业动态数据中心构建&quot;&gt;企业动态数据中心构建&lt;/h2&gt;

&lt;h3 id=&quot;企业it的发展&quot;&gt;企业IT的发展&lt;/h3&gt;

&lt;p&gt;传统数据中心缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;资源利用率低。主要原因是，按照各业务最高峰使用量来配置资源。&lt;/li&gt;
  &lt;li&gt;资源孤岛。资源分配给各应用之后相对固化，很难调配。&lt;/li&gt;
  &lt;li&gt;自动化程度较低。资源配置和部署过程多采用人工方式，无相应平台支持，无自服务和自动部署能力，使大量人力资源耗费在重复性工作上。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据中心架构演变：&lt;/p&gt;

&lt;p&gt;集中式大型主机 -&amp;gt; 分散式UNIX小型服务器 -&amp;gt; 逻辑上集中式巨型计算机。&lt;/p&gt;

&lt;h3 id=&quot;动态数据中心基础&quot;&gt;动态数据中心基础&lt;/h3&gt;

&lt;p&gt;思想：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以服务为核心。屏蔽底层IT技术的复杂性，将IT以服务形式展现给最终用户。&lt;/li&gt;
  &lt;li&gt;提供灵活性。工作负载可移动性；可快速部署新服务；可根据需求增加或减少使用量。&lt;/li&gt;
  &lt;li&gt;公共设施化。所有基层设施资源，包括网络、存储和服务器等，都设计成一个统一平台。&lt;/li&gt;
  &lt;li&gt;最小化人工操作。可以动态地执行运营任务，自动侦测和响应故障情况，根据负载自动扩缩容。&lt;/li&gt;
  &lt;li&gt;透明的费用明细。提供根据服务的实际使用量计算的计费模型。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基本架构模型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;资源池。经过虚拟化抽象之后的服务器、网络和存储等资源的集合。&lt;/li&gt;
  &lt;li&gt;物理故障域。当上级硬件设备故障时会同时出错的一个服务器集合。&lt;/li&gt;
  &lt;li&gt;升级域。一个会被同时升级的服务器的逻辑集合。&lt;/li&gt;
  &lt;li&gt;预留容量。为保证所有应用在升级域或故障域维护时能正常运行，在资源池中预留的一部分资源。&lt;/li&gt;
  &lt;li&gt;扩展单元。事先定义好的用来扩展数据中心的单元，包括服务器、网络设备、存储、电源和制冷设备等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;动态数据中心方案&quot;&gt;动态数据中心方案&lt;/h3&gt;

&lt;p&gt;整体架构：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;资源层。&lt;/li&gt;
  &lt;li&gt;虚拟化层。&lt;/li&gt;
  &lt;li&gt;管理层。&lt;/li&gt;
  &lt;li&gt;服务层。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自服务门户：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;账户信息管理。&lt;/li&gt;
  &lt;li&gt;自服务操作。&lt;/li&gt;
  &lt;li&gt;自服务监控。&lt;/li&gt;
  &lt;li&gt;服务生命周期管理。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;核心功能实现&quot;&gt;核心功能实现&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;面向服务的接口设计。&lt;/li&gt;
  &lt;li&gt;虚拟化服务。&lt;/li&gt;
  &lt;li&gt;系统监控服务。&lt;/li&gt;
  &lt;li&gt;配置管理服务。&lt;/li&gt;
  &lt;li&gt;数据保护服务。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;云中平台&quot;&gt;云中平台&lt;/h2&gt;

&lt;h3 id=&quot;windows-azure平台&quot;&gt;Windows Azure平台&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Windows Azure：基于Windows环境的应用托管、数据存储服务。&lt;/li&gt;
  &lt;li&gt;SQL Azure：基于SQL Server的数据库服务。&lt;/li&gt;
  &lt;li&gt;Windows Azure Platform AppFabric：应用级别的服务平台。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows Azure的计算服务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web Role：运行在IIS上的Web服务。&lt;/li&gt;
  &lt;li&gt;Worker Role：托管应用代码。&lt;/li&gt;
  &lt;li&gt;Azure API：封装了Windows Azure的管理服务。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Windows Azure的存储服务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Blob：大型二进制对象存储。例如图片、视频、音频文件。&lt;/li&gt;
  &lt;li&gt;Driver：虚拟硬盘，类NTFS。&lt;/li&gt;
  &lt;li&gt;Table：结构化存储。&lt;/li&gt;
  &lt;li&gt;Queue：消息队列，可靠的异步消息传递。&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">【读书笔记】让云触手可及——微软云计算实践指南</summary></entry></feed>